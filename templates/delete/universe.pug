extends ../layout.pug

block content
  script!= `const universeShortname = '${universe.shortname}'`
  script.
    async function deleteUniverse() {
      const shortname = document.getElementById('shortname').value;
      if (shortname !== universeShortname) return;
      const response = await fetch(`/api/universes/${universeShortname}`, { method: 'DELETE' })
      if (response.ok) {
        window.location.reload();
      } else {
        const errSpan = document.getElementById('error');
        errSpan.innerText = await response.json();
      }
    }

  h2 #{T('Delete %s', universe.title)}
  .d-flex.flex-col

    .big-text
      p #{T('Are you sure you want to delete %s? This action is ', universe.title)}
        b #{T('permanent')}
        |  #{T('and')}
        b.color-error #{T(' cannot be undone!')}

      ul
        li #{T('All items in %s will be deleted.', universe.title)}
        li #{T('All images uploaded to %s and its items will be deleted.', universe.title)}
        li #{T('All discussion threads and all comments (in threads and on items) will be deleted.')}
        li #{T('Notes pinned to this universe and its items will ')}
          i #{T('not')}
          | #{T(' be deleted, but will be unpinned.')}

      p #{T('If you are ')}
        b #{T('absolutely sure')}
        | #{T(' you want to delete %s, please type in its shortname', universe.title)} (
        code #{universe.shortname}
        | ) #{T('below')}.

    div.inputGroup
      label(for='title') #{T('Universe shortname')}: 
      input(id='shortname' type='text' name='shortname')

    .d-flex.align-center.gap-2
      button.color-error(onclick='deleteUniverse()') #{T('Delete Universe')}
      a.link.link-animated(href=universeLink(universe.shortname)) #{T('Go Back')}

    div
      span#error(style={ color: 'red', 'font-size': 'small' })
