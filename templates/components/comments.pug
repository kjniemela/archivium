div
  .d-flex.flex-col.gap-4
    each comment in comments
      .sheet.d-flex.gap-4.align-start
        if comment.author_id
          img.userIcon.shrink-0(alt=commenters[comment.author_id].username, src=commenters[comment.author_id].pfpUrl)
        if comment.body
          .d-flex.flex-col.grow-1.overflow-hidden
            .d-flex.align-baseline
              if comment.author_id
                a.link.link-animated(href=`/users/${commenters[comment.author_id].username}`) 
                  b #{commenters[comment.author_id].username}
              else
                | #{T('Deleted User')}
              small.ml-2 #{formatDate(comment.created_at)}
              if contextUser
                .grow-1
                if contextUser.id === comment.author_id || canDelete
                  small.align-self-start
                    a.link.link-animated.d-flex.align-center(onclick=`deleteComment(${comment.id})`)
                      span.material-symbols-outlined(style={ 'font-size': '1rem' }) delete
                      | #{T('Delete')}
            .comment(data-val=comment.body)
        else
          span.link.disabled #{T('Deleted comment')}

  br
  if comments.length > 0
    hr
    br

  if contextUser && canComment
    form#post-comment(method='POST' action=commentAction)
      .editor(data-replicated-value='')
        textarea.comment-field(id='body' name='body' oninput="t")
        span.chars 2000
      div
        button#post(type='submit') #{T('Post Comment')}
      if error
        div
          span(style={ 'font-size': 'small' }).color-error #{T(error)}

  script.
    document.querySelectorAll('textarea.comment-field').forEach(el => {
      el.oninput = () => {
        el.parentNode.dataset.replicatedValue = el.value;
        el.parentNode.querySelector('.chars').innerText = 2000 - el.value.length;
        el.form.post.disabled = el.value.length > 2000;
      };
    });
      
    document.querySelectorAll('.comment').forEach((el) => {
      loadMarkdown(el, '#{universeShortname}', el.dataset.val, null);
    });

    async function deleteComment(commentID) {
      const apiRoute = `${apiRoute}/${commentID}`;
      await deleteJSON(apiRoute);
      window.location.reload();
    }
