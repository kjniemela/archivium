mixin universeCard(universe)
  .card.sheet.gap-4.align-start(data-goto=`${universeLink(universe.shortname)}/`)
    .d-flex.flex-col.grow-1
      h3.ma-0
        a.link.link-animated(href=`${universeLink(universe.shortname)}/`) #{universe.title}
      .d-flex.gap-1

    .d-flex.flex-col.grow-3(style='grid-column: 2 / 4;')
      span 
        b #{T('Authors')}: 
        +authorList(universe.authors, universe.author_permissions)
      .d-flex.gap-2.flex-wrap
        span
          b #{T('Created')}: 
          | #{formatDate(universe.created_at, true)}
        | — 
        span 
          b #{T('Updated')}: 
          | #{formatDate(universe.updated_at, true)}
        | —
        span #{universe.public ? T('Public') : T('Private')}
        if contextUser
          | —
          a.follow-btn.link.link-animated(data-following=universe.followers[contextUser.id] data-universe-short=universe.shortname)
            | #{universe.followers[contextUser.id] ? T('Unfollow') : T('Follow')}

.card-list
  if contextUser
    .card.sheet(data-goto=`${ADDR_PREFIX}/universes/create`)
      .d-flex.justify-center(style={ 'grid-column': '1 / 4' })
        a.link.d-flex.justify-center(href=`${ADDR_PREFIX}/universes/create`)
          .navbarText.material-symbols-outlined.heavy.ma-0.pa-1.pr-0.grow-0(style={ 'font-size': '1.5rem' }) add
          .big-text.navbarText.pa-1.grow-0 #{T('New Universe')}
    each universe in universes.filter(universe => (universe.followers[contextUser.id] || universe.author_permissions[contextUser.id] >= perms.WRITE))
      +universeCard(universe)
    each universe in universes.filter(universe => !(universe.followers[contextUser.id] || universe.author_permissions[contextUser.id] >= perms.WRITE))
      +universeCard(universe)
  else
    each universe in universes
      +universeCard(universe)
  
  script.
    document.querySelectorAll('.follow-btn').forEach((followBtn) => {
      followBtn.addEventListener('click', async (e) => {
        e.stopPropagation();
        const { following, universeShort } = followBtn.dataset;
        let isFollowing = following !== 'true';
        followBtn.classList.add('disabled');
        followBtn.classList.remove('link-broken');
        try {
          await putJSON(`/api/universes/${universeShort}/follow`, { isFollowing });
        } catch (err) {
          console.error(err);
          followBtn.classList.add('link-broken');
          isFollowing = !isFollowing;
        } finally {
          followBtn.innerText = isFollowing ? 'Unfollow' : 'Follow';
          followBtn.dataset.following = isFollowing ? 'true' : 'false';
          followBtn.classList.remove('disabled');
        }
      });
    });
