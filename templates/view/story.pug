extends ../layout.pug
include ../mixins.pug

block title
  title #{story.title} â€” #{T('Archivium')}

block breadcrumbs
  a.link.link-animated(href=`${ADDR_PREFIX}/`) #{T('Home')}
  |  / 
  a.link.link-animated(href=`${ADDR_PREFIX}/stories`) #{T('Stories')}
  |  / 
  span #{story.title}

block content
  script
    include /static/scripts/cardUtils.js
    include /static/scripts/listUtils.js
    include /static/scripts/fetchUtils.js
  
  h1.center #{story.title}
  .center.mx-auto(style={ 'max-width': '520px' })
    small #{story.summary}
  p#info-bar.center
    small Created by 
      if story.author
        a.link.link-animated( href=`${ADDR_PREFIX}/users/${story.author}` ) #{story.author}
      else
        | Deleted User
      |  #{formatDate(new Date(story.created_at))}
      |  - Last updated #{formatDate(new Date(story.updated_at))}
      if contextUser
        if story.author_id === contextUser.id
          |  - 
          a.link.link-animated(href=`${ADDR_PREFIX}/stories/${story.shortname}/edit`) #{T('Edit')}
          |  - 
          a.link.link-animated(href=`${ADDR_PREFIX}/stories/${story.shortname}/delete`) #{T('Delete')}

  hr
  - const canEdit = contextUser && contextUser.id === story.author_id;
  if canEdit
    .card-list.mb-2
      .card.sheet( data-goto=`${ADDR_PREFIX}/stories/${story.shortname}/create` )
        .d-flex.justify-center( style={ 'grid-column': '1 / 4' } )
          a.link.d-flex.justify-center( href=`${ADDR_PREFIX}/stories/${story.shortname}/create` )
            .navbarText.material-symbols-outlined.heavy.ma-0.pa-1.pr-0.grow-0( style={ 'font-size': '1.5rem' } onclick="showModal('new-tab-modal')" ) add
            .big-text.navbarText.pa-1.grow-0 #{T('New Chapter')}
    p.center.mb-2
      i (#{T('Drag and drop to reorder chapters.')})
  .card-list.gap-1(class={ 'reorder-chapters': canEdit })
    each index in Object.keys(story.chapters).sort((a, b) => a - b)
      .card.sheet.sortable-item.gap-4.align-start.py-3(data-goto=`${ADDR_PREFIX}/stories/${story.shortname}/${index}` data-index=index draggable=(canEdit ? "true" : "false"))
        .d-flex.align-center.gap-1(style='grid-column: 1 / 4;')
          if canEdit
            span.material-symbols-outlined.clickable.drag_icon(style={ width: '1.5rem', 'margin-left': '-1rem' }) drag_indicator
          h3.ma-0
            a.link.link-animated(href=`${ADDR_PREFIX}/stories/${story.shortname}/${index}`) #{story.chapters[index].title}
          if !story.chapters[index].is_published
            span (#{T('Draft')})
          .grow-1
          span #{formatDate(new Date(story.chapters[index].created_at), true)}

  script.
    document.querySelectorAll('.drag_icon').forEach(el => {
      el.addEventListener('click', (e) => {
        e.stopPropagation();
      });
    });

    let saveTimeout = null;
    let saving = false;
    async function save(list, order, delay=1000) {
      if (saveTimeout) {
        clearTimeout(saveTimeout);
      }
      saveTimeout = setTimeout(async () => {
        console.log('SAVING...');

        try {
          saving = true;
          await putJSON(`/api/stories/#{story.shortname}`, { order });
          console.log('SAVED.');
          const newIndexEls = {};
          for (let i = 0; i < order.length; i++) {
            const oldIndex = order[i];
            const el = list.querySelector(`.sortable-item[data-index="${oldIndex}"]`);
            newIndexEls[i + 1] = el;
          }
          for (const index in newIndexEls) {
            const el = newIndexEls[index];
            el.dataset.index = index;
          }
          saving = false;
        } catch (err) {
          console.error('Failed to save!');
          console.error(err);
        }
      }, delay);
    }

    const list = document.querySelector('.reorder-chapters');
    if (list) {
      let draggedItem = null;

      list.addEventListener('dragstart', (e) => {
        if (e.target.classList.contains('sortable-item') && !saving) {
          draggedItem = e.target;
          e.dataTransfer.effectAllowed = 'move';
        }
      });

      list.addEventListener('dragover', (e) => {
        e.preventDefault();
      });

      list.addEventListener('drop', async (e) => {
        e.preventDefault();
        const target = e.target.closest('.sortable-item');
        if (!saving && draggedItem && target && target !== draggedItem) {
          const children = Array.from(list.children);
          const draggedIndex = children.indexOf(draggedItem);
          const targetIndex = children.indexOf(target);
          if (draggedIndex < targetIndex) {
            target.after(draggedItem);
          } else {
            target.before(draggedItem);
          }
          const newIndexes = Array.from(list.children).map(el => el.dataset.index);
          save(list, newIndexes);
        }
        draggedItem = null;
      });
    }
