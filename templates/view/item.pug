extends ../layout.pug

block title
  title #{item.title}

block append styles
  link(rel="stylesheet" href="https://unpkg.com/easymde/dist/easymde.min.css")

block scripts
  script(src="https://unpkg.com/easymde/dist/easymde.min.js")
  script
    include /static/scripts/tabs.js
    include /static/scripts/domUtils.js
    include /static/scripts/fetchUtils.js
    include /static/scripts/markdown/parse.js
    include /static/scripts/markdown/render.js
    include /static/scripts/modal.js
    include /static/scripts/searchableSelect.js
    include /static/scripts/editor/markdown.js
    include /static/scripts/calendarPicker.js
    include /static/scripts/timelineRender.js
    include /static/scripts/cardUtils.js
    include /static/scripts/easyMDE.js
    //- include /static/scripts/editor/rich.js

block breadcrumbs
  if displayUniverse
    a.link.link-animated(href=`${ADDR_PREFIX}/`) #{universe.title}
  else
    a.link.link-animated(href=`${ADDR_PREFIX}/`) #{T('Home')}
    |  / 
    a.link.link-animated(href=`${ADDR_PREFIX}/universes`) #{T('Universes')}
    |  / 
    a.link.link-animated(href=`${ADDR_PREFIX}/universes/${universe.shortname}`) #{universe.title}
  |  / 
  a.link.link-animated(href=`${ADDR_PREFIX}/universes/${universe.shortname}/items?type=${item.item_type}`) #{capitalize(T(`${((universe.obj_data.cats || {})[item.item_type] || [, 'Missing Category'])[1]}`))}
  |  / 
  span #{item.title}

block content
  .d-flex.justify-center
    .sheet.mt-8.px-8.py-4(style={ 'background-color': item.itemTypeColor, 'min-width': '15vw' })
      h1.center.ma-0 #{item.title}
      p.center.ma-0 #{capitalize(T(item.itemTypeName))}
        if !displayUniverse
          |  of #{item.universe}
  p.center.mb-2
    small #{T('Created by ')}
      if item.author
        a.link.link-animated(href=`${ADDR_PREFIX}/users/${item.author}`) #{item.author}
      else
        | #{T('Deleted User')}
      |  #{formatDate(new Date(item.created_at))}
      |  - Last updated #{formatDate(new Date(item.updated_at))}
  #action-bar.d-flex.justify-center.align-center.gap-2.mb-1
    if contextUser
      a.link.d-flex.align-center
        span#notification-bell.material-symbols-outlined.mr-1(
          style={ 'font-size': 'xx-large' }
          title='Item Notifications'
          class={ solid: item.notifs_enabled }
        ) #{item.notifs_enabled ? 'notifications_active' : 'notifications'}
        span#subscribe-text #{item.notifs_enabled ? 'Unsubscribe' : 'Subscribe'}
      script.
        (() => {
          let isSubscribed = #{item.notifs_enabled};
          const bell = document.getElementById('notification-bell');
          const text = document.getElementById('subscribe-text');
          bell.parentElement.addEventListener('click', async () => {
            isSubscribed = !isSubscribed;
            bell.classList.add('disabled');
            try {
              await putJSON(`/api/universes/${universe.shortname}/items/${item.shortname}/subscribe`, { isSubscribed: isSubscribed });
            } catch (err) {
              console.error(err);
              isSubscribed = !isSubscribed;
            } finally {
              bell.textContent = isSubscribed ? 'notifications_active' : 'notifications';
              bell.classList.toggle('solid', isSubscribed);
              bell.classList.remove('disabled');
              text.textContent = isSubscribed ? 'Unsubscribe' : 'Subscribe';
            }
          });
        })();
      if universe.author_permissions[contextUser.id] >= perms.WRITE
        a.link.link-animated.d-flex.align-center(href=`${universeLink(universe.shortname)}/items/${item.shortname}/edit`)
          span.material-symbols-outlined edit
          |  #{T('Edit')}
      if universe.author_permissions[contextUser.id] >= perms.OWNER
        a.link.link-animated.d-flex.align-center(href=`${universeLink(universe.shortname)}/items/${item.shortname}/delete`)
          span.material-symbols-outlined delete
          |  #{T('Delete')}
  .center#tags
    small
      if item.tags
        each tag in item.tags
          if tag
            a.link.link-animated(href=`${universeLink(universe.shortname)}/items?tag=${tag}`) ##{tag} 
          
  hr

  //- Tab buttons
  ul#tabBtns.navbarBtns.gap-1.mb-2.scroll-x
    if 'body' in item.obj_data
      li.navbarBtn#bodyBtn(data-tab='body')
        h3.navbarBtnLink.navbarText(onclick=`showTab('body')`) #{T('Main Text')}
    if 'tabs' in item.obj_data
      each tab, name in item.obj_data.tabs
        li.navbarBtn(data-tab=name)
          h3.navbarBtnLink.navbarText.ma-0(onclick=`showTab('${name}')`) #{name}
    each dataType in ['timeline', 'gallery', 'lineage']
      if dataType in item.obj_data && 'title' in item.obj_data[dataType]
        li.navbarBtn(data-tab=dataType)
          h3.navbarBtnLink.navbarText.ma-0(onclick=`showTab('${dataType}')`) #{item.obj_data[dataType].title}
    if item.obj_data.comments
      li.navbarBtn(data-tab='comments')
        h3.navbarBtnLink.navbarText.ma-0(onclick=`showTab('comments')`) #{capitalize(T('comments'))}
    if item.obj_data.notes || (contextUser && universe.author_permissions[contextUser.id] >= perms.WRITE && notes.length > 0)
      li.navbarBtn(data-tab='notes')
          h3.navbarBtnLink.navbarText.ma-0( onclick=`showTab('notes')` ) #{capitalize(T('notes'))}
            if !item.obj_data.notes
              |  #{T('(Hidden)')}


  #data(data-item=item data-universe=universe)
  script.
    var { item, universe } = document.querySelector('#data').dataset;
    item = JSON.parse(item);
    universe = JSON.parse(universe);

  .tabs
    if 'tabs' in item.obj_data
      each tab, name in item.obj_data.tabs
        .itemTab.hidden(data-tab=name)
          each val, key in tab
            .itemKey
              span #{key}
              hr
              .mdVal(data-val=val)

    if 'timeline' in item.obj_data && 'title' in item.obj_data.timeline
      .itemTab.hidden(data-tab='timeline')
      script.
        const timelineTab = document.querySelector('.itemTab[data-tab=timeline]');
        if (timelineTab) {
          renderTimeline(timelineTab, item, item.events);
        };

    if 'gallery' in item.obj_data && 'title' in item.obj_data.gallery
      .itemTab.hidden.gallery(data-tab='gallery')
        each img in item.gallery || []
          .itemKey
            img(src=`/api/universes/${universe.shortname}/items/${item.shortname}/gallery/images/${img.id}`, title=img.name, alt=img.label)
            if img.label
              .mdLabel(data-val=img.label)

    if 'lineage' in item.obj_data && 'title' in item.obj_data.lineage
      .itemTab.hidden( data-tab='lineage' )
        each parent in item.parents
          .itemKey
            span #{parent.parent_label || T('Parent')}
            hr
            a.link.link-animated(href=`${universeLink(universe.shortname)}/items/${parent.parent_shortname}`)
              | #{parent.parent_title}
        each child in item.children
          .itemKey
            span #{child.child_label || T('Child')}
            hr
            a.link.link-animated(href=`${universeLink(universe.shortname)}/items/${child.child_shortname}`)
              | #{child.child_title}
        
    if item.obj_data.comments
      .hidden(data-tab='comments')
        -
          const canComment = contextUser && (
            (universe.public && universe.discussion_open)
            || (universe.author_permissions[contextUser.id] >= (universe.discussion_open ? perms.READ : perms.COMMENT))
          );
          const canDelete = contextUser && universe.author_permissions[contextUser.id] >= perms.ADMIN;
          const apiRoute = `/api/universes/${universe.shortname}/items/${item.shortname}/comments`;
          const universeShortname = universe.shortname;
        include ../components/comments.pug
        
    if item.obj_data.notes || (contextUser && universe.author_permissions[contextUser.id] >= perms.WRITE && notes.length > 0)
      .hidden(data-tab='notes')
        if !item.obj_data.notes
          .center
            .ma-auto.my-2(style={ 'max-width': '32rem' })
              small
                i #{T('This tab is visible to you since this item has notes linked to it and you have edit access.')}
                  | #{T('To make this tab visible to everyone, enable notes for this item.')}
        include ../components/notes.pug

    if 'body' in item.obj_data
      .sheet.hidden(data-tab='body')
        #markdown-body

  script.
    (function() {
      const body = document.getElementById('markdown-body');
      if (body) {
        loadMarkdown(body, '#{universe.shortname}', item.obj_data.body, { item }).then(async () => {
          await tabLoadPromise;
          const hash = location.hash.substr(1);
          if (hash) {
            const el = document.getElementById(hash);
            el.scrollIntoView();
          }
        });
      };

      document.querySelectorAll('.mdVal').forEach((el) => {
        loadMarkdown(el, '#{universe.shortname}', el.dataset.val, null, (tag) => {
          if (tag.type === 'div') tag.attrs.style = {'text-align': 'right'};
          if (tag.type === 'p') tag.type = 'span';
        });
      });

      document.querySelectorAll('.mdLabel').forEach((el) => {
        loadMarkdown(el, '#{universe.shortname}', el.dataset.val, null, (tag) => {
          if (tag.type === 'div') {
            tag.attrs.style = {'text-align': 'center'};
            tag.attrs.class += ' label';
          }
          if (tag.type === 'p') tag.type = 'span';
        });
      });

      const galleryModalState = {}
      const galleryItems = document.querySelectorAll('.gallery .itemKey');
      galleryItems.forEach((itemKey, i) => {
        galleryModalState[i] = false;
        const img = itemKey.querySelector('img');

        img.onclick = (e) => {
          e.stopPropagation();
          if (!galleryModalState[i]) {
            itemKey.classList.add('modal');
            galleryModalState[i] = true;
          }
        };

        itemKey.onclick = () => {
          if (galleryModalState[i]) {
            itemKey.classList.remove('modal');
            galleryModalState[i] = false;
          }
        };
      });
    })();
