extends ../layout.pug

block title
  title #{T('Edit %s', universe.title)}

block append styles
  link(rel="stylesheet" href="https://unpkg.com/easymde/dist/easymde.min.css")
  style.
    #cats td {
      padding: 0.125rem 0;
    }

    #cats td input {
      border-radius: 0;
      border: none;
      width: 100%;
    }

block append save
  li#save-btn.navbarBtn
    script.
    a.navbarBtnLink.navbarText(onclick='document.forms.edit.requestSubmit()') #{T('Save Changes')}

block content
  script(src="https://unpkg.com/easymde/dist/easymde.min.js")
  script
    include /static/scripts/domUtils.js
    include /static/scripts/universes.js
    include /static/scripts/fetchUtils.js
    include /static/scripts/markdown/parse.js
    include /static/scripts/markdown/render.js
    include /static/scripts/easyMDE.js
    include /static/scripts/shortname.js

  h2 #{T('Edit %s', universe.title)}
  form#edit(method='POST')

    .inputGroup
      label(for='title') #{T('Title')}: 
      input(id='title' type='text' name='title' value=universe.title)

    .inputGroup
      label(for='shortname') #{T('Shortname')}: 
      input(id='shortname' type='text' name='shortname' value=universe.newShort)

    .inputGroup
      small(style={ 'grid-column': '2 / 4' })
        i 
          b #{T('Warning')}: 
          | #{T('changing the shortname will kick out any users currently browsing the universe, ')}
          | #{T('any authors currently editing items will be unable to save their work, ')}
          | #{T('and any external bookmarks/links to the universe will break.')}
          | #{T('Make sure you know what you\'re doing!')}

    .inputGroup
      label(for='visibility') #{T('Visibility')}: 
      select(id='visibility' name='visibility')
        option(value='public' selected=(universe.public)) #{T('Public')}
        option(value='private' selected=(!universe.public)) #{T('Private')}

    .inputGroup
      label(for='discussion_enabled') #{T('Discussion')}: 
      select(id='discussion_enabled' name='discussion_enabled')
        option(value='enabled' selected=(universe.discussion_enabled)) #{T('Enabled')}
        option(value='disabled' selected=(!universe.discussion_enabled)) #{T('Disabled')}

    .inputGroup
      label(for='discussion_open') #{T('Who can comment')}: 
      select(id='discussion_open' name='discussion_open')
        option(value='enabled' selected=(universe.discussion_open)) #{T('Anyone')}
        option(value='disabled' selected=(!universe.discussion_open)) #{T('Only with COMMENT permissions')}

    div
      input(id='obj_data' type='hidden' name='obj_data' value='{}')
      button(type='submit') #{T('Save Changes')}

    small.color-error.hidden#validation-error
    if error
      div
        span(style={ color: 'red', 'font-size': 'small' }) #{T(error)}

    #home-body
      h3 #{T('Home Page')}
      .mb-2
        small #{T('This markdown will be shown in the "Home" tab of your universe page.')}
      textarea
        | #{universe.obj_data.homeBody || ''}

    #public-body
      h3 #{T('Public Page')}
      .mb-2
        small #{T('This markdown will be shown to users that don\'t have access to your universe instead of the "Access Denied" page.')}
      textarea
        | #{universe.obj_data.publicBody || ''}

    h3 #{T('Item Types')}
    small
      b #{T('Note:')} 
      | #{T('be aware that removing or renaming item types will not update any existing items with that type.')}
    table
      thead
        tr
          th #{T('Shortname')}
          th #{T('Singular Type Name')}
          th #{T('Plural Type Name')}
          th #{T('Color')}
          th
        tr
          td
          td.center
            small (e.g. "This is an 
              b item
              |  of #{universe.title}")
          td.center
            small (e.g. "These are 
              b items
              |  of #{universe.title}")
          td
          td
      tbody#cats

    .d-flex.gap-2.mt-2
      button(type='button' onclick='addCat()') #{T('Add Type')}
      button(type='button' onclick='resetCats()') #{T('Reset to default types')}

  #data(data-universe=universe)
  script.
    updateObjData(JSON.parse(document.querySelector('#data').dataset.universe).obj_data);

    universe = '#{universe.shortname}';
    window.homeMDE = setupEasyMDE('#home-body textarea', { universe });
    homeMDE.codemirror.on('change', () => {
      updateObjData({ homeBody: homeMDE.value() });
    });
    window.publicMDE = setupEasyMDE('#public-body textarea', { universe });
    publicMDE.codemirror.on('change', () => {
      updateObjData({ publicBody: publicMDE.value() });
    });
    const publicBodyContainer = document.querySelector('#public-body');
    publicBodyContainer.classList.toggle('hidden', #{universe.public});
    const visibilitySelect = document.querySelector('#visibility');
    visibilitySelect.addEventListener('change', () => {
      publicBodyContainer.classList.toggle('hidden', visibilitySelect.value !== 'private');
    });

    function toPlural(title) {
      // This function is very hacky and only works in english (and only sometimes), but it'll be good enough for most cases for now.
      return `${title}s`;
    }

    let catList;
    function resetCatList() {
      catList = [];
      for (const catShortname in obj_data.cats) {
        catList.push([catShortname, ...obj_data.cats[catShortname]]);
      }
    }

    function updateCats() {
      const catsTable = document.getElementById('cats');
      catsTable.innerHTML = '';
      for (let i = 0; i < catList.length; i++) {
        const [catShortname, catTitle, catTitlePl, catColor] = catList[i];

        const titlePlInput = createElement('input', { dataset: { name: 'titlePl' }, attrs: { value: catTitlePl } });
        titlePlInput.addEventListener('input', () => {
          titlePlInput.value = titlePlInput.value.toLowerCase();
          catList[i][2] = titlePlInput.value;
        });

        const titleInput = createElement('input', { dataset: { name: 'title' }, attrs: { value: catTitle } });
        titleInput.addEventListener('input', () => {
          titleInput.value = titleInput.value.toLowerCase();
          if (toPlural(catList[i][1]) === titlePlInput.value || !titlePlInput.value) {
            titlePlInput.value = toPlural(titleInput.value);
            catList[i][2] = titlePlInput.value;
          }
          catList[i][1] = titleInput.value;
        });
        titleInput.addEventListener('change', () => {
          if (!catList[i][0]) {
            catList[i][0] = toShortname(titleInput.value);
            updateCats();
          }
        });

        const colorInput = createElement('input', {
          dataset: { name: 'color' },
          attrs: { id: `color${i}`, value: catColor, type: 'color', style: 'padding: 0; min-width: 3rem;' }
        });
        colorInput.addEventListener('input', () => catList[i][3] = colorInput.value);

        const catRow = createElement('tr', { children: [
          createElement('td', { dataset: { name: 'shortname' }, attrs: { innerText: catShortname } }),
          createElement('td', { children: [titleInput] }),
          createElement('td', { children: [titlePlInput] }),
          createElement('td', { children: [createElement('div', { classList: ['d-flex'], children: [colorInput] })] }),
          createElement('td', { children: [createElement('button', { attrs: {
            innerText: T('Remove'),
            onclick: (e) => {
              e.preventDefault();
              catList.splice(i, 1);
              updateCats();
            },
          } })] }),
        ] });
        catsTable.appendChild(catRow);
      }
    }

    function addCat() {
      catList.push(['', '', '', '#ffffff']);
      updateCats();
    }

    function resetCats() {
      setDefaultCats();
      resetCatList();
      updateCats();
    }

    window.addCat = addCat;
    window.resetCats = resetCats;

    if (!('cats' in obj_data)) setDefaultCats();
    resetCatList();
    updateCats();

    document.forms.edit.addEventListener('submit', (e) => {
      const formError = document.querySelector('#validation-error');
      formError.classList.add('hidden');

      const newCats = {};
      for (let i = 0; i < catList.length; i++) {
        let [catShortname, catTitle, catTitlePl, catColor] = catList[i];

        if (!catTitle) {
          // Title is missing, error
          formError.innerText = T('Make sure the name fields for all item types are filled out, or remove unwanted ones!');
          formError.classList.remove('hidden');
          return e.preventDefault();
        }

        if (!catShortname) {
          // Shortname is missing, autofill it
          catShortname = toShortname(catTitle);
        }

        if (!catTitlePl) {
          // Title plural is missing, autofill it
          catTitlePl = toPlural(catTitle);
        }

        newCats[catShortname] = [catTitle.trim(), catTitlePl.trim(), catColor];
      }
      updateObjData({ cats: newCats });
    });
