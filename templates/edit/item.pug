extends ../layout.pug

block title
  title #{T('Edit %s', item.title)}

block breadcrumbs
  if displayUniverse
    a.link.link-animated(href=`${ADDR_PREFIX}/`) #{universe.title}
  else
    a.link.link-animated(href=`${ADDR_PREFIX}/`) #{T('Home')}
    |  / 
    a.link.link-animated(href=`${ADDR_PREFIX}/universes`) #{T('Universes')}
    |  / 
    a.link.link-animated(href=`${ADDR_PREFIX}/universes/${universe.shortname}`) #{universe.title}
  |  / 
  a.link.link-animated(href=`${ADDR_PREFIX}/universes/${universe.shortname}/items?type=${item.item_type}`) #{capitalize(T(`${((universe.obj_data.cats || {})[item.item_type] || [, 'Missing Category'])[1]}`))}
  |  / 
  a.link.link-animated(href=`${ADDR_PREFIX}/universes/${universe.shortname}/items/${item.shortname}`) #{item.title}
  |  / 
  span #{T('Edit')}

block styles
  link(rel="stylesheet" href="https://unpkg.com/easymde/dist/easymde.min.css")

block scripts
  script(src="https://unpkg.com/easymde/dist/easymde.min.js")
  script
    include /static/scripts/domUtils.js
    include /static/scripts/searchableSelect.js
    include /static/scripts/modal.js
    include /static/scripts/fetchUtils.js
    include /static/scripts/markdown/parse.js
    include /static/scripts/markdown/render.js
    include /static/scripts/calendarPicker.js
    include /static/scripts/fileUpload.js
    include /static/scripts/jsUtils.js
    include /static/scripts/easyMDE.js
    include /static/scripts/itemEditor.js

block append save
  li#save-btn.navbarBtn
    a.navbarBtnLink.navbarText(onclick='save(0)') #{T('Save')}
  li#preview-btn.navbarBtn
    a.navbarBtnLink.navbarText(onclick='preview()') #{T('Preview')}

block content
  .d-flex.justify-between.align-baseline
    h2 Edit #{item.title}
    a.link.link-animated.color-error(href=`${ADDR_PREFIX}/universes/${universe.shortname}/items/${item.shortname}`) #{T('Discard Changes')}
  form#edit(method='POST')

    .inputGroup
      label(for='title') #{T('Title')}: 
      input(id='title' type='text' name='title' value=item.title)

    .inputGroup
      label(for='shortname') #{T('Shortname')}: 
      input(id='shortname' type='text' name='shortname' value=item.newShort)

    .inputGroup
      small(style={ 'grid-column': '2 / 4' })
        i #{T('NOTE: changes to the shortname will not auto-save.')}
        br
        i #{T('Other users currently editing this item will be unable to save their work. Change with caution.')}

    .inputGroup
      label(for='item_type') #{T('Type')}: 
      select(id='item_type' name='item_type')
        option(hidden disabled selected value) #{T('Select one')}...
        each arr, type in universe.obj_data.cats
          option(value=type, selected=(item.item_type === type))= capitalize(T(arr[0]))

    .inputGroup
      label(for='tags') #{T('Tags')}: 
      textarea(id='tags' name='tags') #{(item.tags || []).join(' ')}

    .inputGroup
      label(for='comments') #{T('Enable comments')}: 
      label.switch
        input(id='comments' name='comments' type='checkbox' checked=item.obj_data.comments onchange='updateObjData({ comments: this.checked })')
        span.slider

    .inputGroup
      label(for='notes') #{T('Enable notes')}: 
      label.switch
        input(id='notes' name='notes' type='checkbox' checked=item.obj_data.notes onchange='updateObjData({ notes: this.checked })')
        span.slider

    .mt-2
      button(type='submit') #{T('Save Changes')}

    div
      span#item-error(class={ hidden: !error } style={color: 'red', 'font-size': 'small'})= error 
    
    hr.w-100.mb-0

    div#tabs
      div#new-tab-modal
        script.
          function handleTypeChange() {
            const type = getIdValue('new-tab-type');
            const input = document.getElementById('new_tab');
            if (type === 'custom') input.classList.remove('hidden');
            else input.classList.add('hidden');
          }
          function addTabByType() {
            const option = document.getElementById('new-tab-type').selectedOptions[0];
            const type = option.value;
            if (!type) return;
            const name = type === 'custom' ? getIdValue('new_tab') : option.innerText;
            addTab(type, name);
            handleTypeChange();
            hideModal('new-tab-modal');
          }
        .sheet.d-flex.flex-col.gap-1(style={ 'min-width': '20rem' })
          select#new-tab-type(onchange='handleTypeChange()')
            option(hidden disabled selected value) #{T('Tab Type')}...
            each type in ['body', 'lineage', 'location', 'timeline', 'gallery']
              option(value=type)= type === 'body' ? 'Main Text' : capitalize(T(type))
            option(value='custom')= T('Custom Data')
          input(id='new_tab' type='text' placeholder='Tab Name').hidden
          button(type='button' onclick=`addTabByType()`)= T('New Tab')
      script.
        loadModal('new-tab-modal');
      div.d-flex.align-start.mb-2
        ul.tabs-buttons.navbarBtns.gap-1.grow-1
        ul.navbarBtns
          li.navbarBtn
            h3.navbarBtnLink.navbarText.ma-0.material-symbols-outlined.heavy(onclick="showModal('new-tab-modal')") add
      div.tabs-content

      div#body.hidden
        textarea
          | #{item.obj_data.body || ''}
      
    div
      input(id='obj_data' type='hidden' name='obj_data' value='{}')

  script
    | itemMap = {
    each title, shortname in itemMap
      | '#{shortname}': '#{title.replaceAll('\'', '\\\'')}',
    | };
  #data(data-item=item)
  script.
    var { item } = document.querySelector('#data').dataset;
    item = JSON.parse(item);
    
    updateObjData(item.obj_data);
    universe = '#{item.universe_short}';

    resetTabs();
    window.easyMDE = setupEasyMDE('#body textarea', { universe, context: { item } });
    easyMDE.codemirror.on('change', () => {
      updateObjData({ body: easyMDE.value() });
    });
